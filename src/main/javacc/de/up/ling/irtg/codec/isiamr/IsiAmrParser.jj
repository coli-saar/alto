/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
  STATIC = false;
  FORCE_LA_CHECK=true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
  UNICODE_INPUT=true;
}
PARSER_BEGIN(IsiAmrParser)
package de.up.ling.irtg.codec.isiamr;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import de.up.ling.irtg.algebra.graph.*;

/**
 * Utility class to parse AMR style graphs.
 */
public class IsiAmrParser {
    private SGraph graph = null;

	
	/**
 	 * Parses the s-graph represented as a string in {@code reader}
	 */
	public static SGraph parse(Reader reader) throws ParseException {
		IsiAmrParser parser = new IsiAmrParser(new ByteArrayInputStream(new byte[]{}));

                parser.ReInit(reader);

                parser.graph = new SGraph();

                parser.graph();
		return parser.graph;
	}

	    // node name a already exists => overwrite label
	    // otherwise:
        // a, b => return node with name a, label b
        // a, null => return node with name a, label null
        private GraphNode addNodeInBrackets(String nodename, String nodelabel) {
	      if (graph.getNode(nodename) != null) {
	          GraphNode existingNode = graph.getNode(nodename);
	          if (existingNode.getLabel() != null){
	              System.err.println("Warning: overwriting label" + existingNode.getLabel() +
	                                    " of node " + nodename + " with " + nodelabel);
	          }
	          existingNode.setLabel(nodelabel);
	          return existingNode;
	      } else {
              return graph.addNode(nodename, nodelabel);
          }
        }

        // nodespec is known nodename => return node with that name
        // otherwise =>
        //      if nodespec matches typical AMR node name format => return new node with that name and label null
        //      otherwise => return anonymous node with that label
        private GraphNode addNodeWithoutBrackets(String nodespec) {
            if( nodespec != null && graph.containsNode(nodespec) ) {
                return graph.getNode(nodespec);
            } else {
                if (nodespec.matches("[a-z][0-9]*")) {
                    return graph.addNode(nodespec, null);
                } else {
                    return graph.addAnonymousNode(nodespec);
                }
            }
       }

       // return anonymous node with that label
       private GraphNode addNodeVerbatim(String nodespec) {
           return graph.addAnonymousNode(nodespec);
      }

      private String processDoubleQuoted(Token tok) {
	    String withEscapes = tok.image.substring(1, tok.image.length()-1);
            StringBuffer newText = new StringBuffer();
            for (int i = 0; i < withEscapes.length(); i++) {
                if (withEscapes.charAt(i) == '\\') {
                    // jump to the next character to see whether it is a double quote
                    i += 1;
                     if (withEscapes.charAt(i) != '"') {
                         // no double qoute: add the backslash, otherwise it is omitted.
                         newText.append('\\');
                     }
                }
                // add the character.
                newText.append(withEscapes.charAt(i));
            }
            return newText.toString();
        }
}
PARSER_END(IsiAmrParser)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
    <BASIC_TOKEN: ((["a"-"z", "A"-"Z", "-", "_", "0"-"9", ".", "\'", "+"])+ )> |
    <EDGE: [":"] (~[" ", "\t", "\n"])*> |
    <DOUBLE_QUOTED_TOKEN: "\""
    (
         "\\" ~[]     //any escaped character
    |                 //or
        ~["\"","\\"]  //any character except quote or backslash
    )*
    "\"">
}

void graph() :
{
    GraphNode g;
    String name;
    List<String> vars = new ArrayList<String>();
}{
    g = node()
}


GraphNode node() :
{
  GraphNode u = null;
  String nodename;
  String nodelabel = null;
  String edgelabel;
  List<String> sources = null;
  GraphNode edgeTarget;  
}
{
  "(" (  (nodename=token() ("<" sources=tokenList() ">")? ("/" nodelabel=any_label())?  {
                  u = addNodeInBrackets(nodename, nodelabel);
           })

         | ("<" sources=tokenList() ">" ("/" nodelabel=any_label())? {
                  u = graph.addAnonymousNode(nodelabel);  // this syntax always means new anonymous node
           })
      ) {
       if( sources != null ) {
             for( String source : sources ) {
               graph.addSource(source, u.getName());
             }
         }
      }

      (edgelabel=edge()  edgeTarget=node() {
         if( edgelabel.endsWith("-of") ) {
           // reverse edge direction if edge label ends in "-of"
           edgelabel = edgelabel.substring(0, edgelabel.length()-3);
           graph.addEdge(edgeTarget, u, edgelabel);
         } else {
           graph.addEdge(u, edgeTarget, edgelabel);
         }
       })*
  ")" { return u; }

  | "<" sources=tokenList() ">" {
    u = graph.addAnonymousNode(null);  // anonymous, unlabeled node
    for( String source : sources ) {
        graph.addSource(source, u.getName());
    }
    return u;
  }

  | nodename=token() { 
       return addNodeWithoutBrackets(nodename);
  }

  | nodename=verbatimToken() {
         return addNodeVerbatim(nodename);
  }
}


List<String> tokenList() :
{
  List<String> ret = new ArrayList<String>();
  String x;
}
{
   (x = token() { ret.add(x); } ("," x = token() { ret.add(x); })*  ) { return ret; }
}


String any_label() :
{
    Token tok;
}
{
    tok = <BASIC_TOKEN> { return tok.image; } |
    tok = <DOUBLE_QUOTED_TOKEN> { return processDoubleQuoted(tok); }
}

String token() :
{
    Token tok;
}
{
    tok = <BASIC_TOKEN> { return tok.image; }
}

// always add things in double brackets (with no node name given) as anonymous node with verbatim label
String verbatimToken() :
{
    Token tok;
}
{
    tok = <DOUBLE_QUOTED_TOKEN> {
        return processDoubleQuoted(tok);
    }
}

String edge() :
{
    Token tok;
}{
    tok = <EDGE> { return tok.image.substring(1); }
}
